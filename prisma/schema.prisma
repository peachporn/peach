datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

model Volume {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  path  String  @unique
  Movie Movie[]
}

model MovieMetadata {
  id Int @id @default(autoincrement())

  movie   Movie @relation(fields: [movieId], references: [id])
  movieId Int   @unique

  quality String
  format  String
  fps     Int

  durationSeconds Int
  sizeInKB        Int
}

model Actress {
  id   Int    @id @default(autoincrement())
  slug String @default("")

  name    String @unique
  aliases String @default("[]")

  haircolor String?
  eyecolor  String?

  dateOfBirth       DateTime?
  dateOfCareerstart DateTime?
  dateOfRetirement  DateTime?
  dateOfDeath       DateTime?

  country   String?
  province  String?
  city      String?
  latitude  Float?
  longitude Float?

  boobs            String?
  cupsize          String?
  dick             Boolean @default(false)
  pussy            Boolean @default(false)
  genderExpression String  @default("Androgynous")

  piercings String?
  tattoos   String?

  height       Int?
  weight       Int?
  measurements String @default("{}")

  socialMediaLinks String?
  officialWebsite  String?

  movies Movie[] @relation()
}

model Movie {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  title     String            @unique
  actresses Actress[]         @relation()
  genres    GenreDefinition[]
  fetishes  Genre[]

  actors Int @default(0)
  cover  Int @default(3)

  website   Website? @relation(fields: [websiteId], references: [id])
  websiteId Int?

  path     String
  volume   Volume @relation(fields: [volumeId], references: [id])
  volumeId Int

  metadata MovieMetadata?
}

model Settings {
  id                Int     @id @default(autoincrement())
  language          String
  libraryPath       String
  inferMovieTitle   String  @default("FILENAME")
  autoConvertMovies Boolean @default(true)
  Genre             Genre[]
}

model Task {
  id            Int     @id @default(autoincrement())
  category      String
  status        String
  statusMessage String?
  parameters    String?
}

model GenreDefinition {
  id Int @id @default(autoincrement())

  movie   Movie @relation(references: [id], fields: [movieId])
  movieId Int

  genre String // { parent: Genre, children: Genre[] } serialized as JSON

  timeStart Float
}

model Genre {
  id            Int     @id @default(autoincrement())
  name          String  @unique
  category      String
  kinkiness     Int
  validAsRoot   Boolean
  validAsFetish Boolean

  linkableParents  Genre[] @relation("Subgenre")
  linkableChildren Genre[] @relation("Subgenre")

  movies Movie[] @relation()

  settings   Settings? @relation(fields: [settingsId], references: [id])
  settingsId Int?
  Website    Website[]
}

model Website {
  id     Int    @id @default(autoincrement())
  name   String @unique
  url    String
  fetish Genre? @relation(references: [id], fields: [genreId])

  movies  Movie[]
  genreId Int?
}
